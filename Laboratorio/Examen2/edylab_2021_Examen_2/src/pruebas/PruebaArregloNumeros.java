package pruebas;

import entradasalida.SalidaTerminal;
import estructuraslineales.ArregloDatos;
import estructuraslineales.ArregloNumeros;

public class PruebaArregloNumeros {
    public static void main(String[] args) {
        ArregloNumeros an1 = new ArregloNumeros(6);
        an1.agregar(5.8);
        an1.agregar(7.0);
        an1.agregar(1.1);
        an1.agregar(3.9);
        an1.agregar(9.0);
        SalidaTerminal.consola("Agregar una letra: "+an1.agregar("H")+"\n");
        SalidaTerminal.consola("xEscalar (5.2): "+an1.xEscalar(5.2)+"\n");
        an1.imprimir();
        SalidaTerminal.consola("sumaEscalar (4.0): "+an1.sumaEscalar(4.0)+"\n");
        an1.imprimir();
        ArregloNumeros an2 = new ArregloNumeros(6);
        an2.agregar(10.0);
        an2.agregar(12.4);
        an2.agregar(9.9);
        an2.agregar(3.3);
        an2.agregar(6.8);
        SalidaTerminal.consola("sumar arreglos: "+an1.sumar(an2)+"\n");
        an1.imprimir();
        SalidaTerminal.consola("multiplicar arreglos: "+an1.sumar(an2)+"\n");
        an1.imprimir();
        SalidaTerminal.consola("potencia a arreglo2 (2): "+an2.potencia(2.0)+"\n");
        an2.imprimir();
        ArregloNumeros an3 = new ArregloNumeros(6);
        an3.agregar(2.0);
        an3.agregar(3.0);
        an3.agregar(5.0);
        an3.agregar(7.0);
        an3.agregar(2.0);
        SalidaTerminal.consola("Potencia arreglo2 con arreglo3: "+ an2.potencia(an3)+"\n");
        an2.imprimir();
        SalidaTerminal.consola("ProductoPunto: "+an3.productoPunto(an2)+"\n");
        an2.imprimir();
        SalidaTerminal.consola("Modulo: "+an2.modulo()+"\n");
        SalidaTerminal.consola("NormaEuclidiana: "+an1.normaEuclidiana(an2)+"\n");
        ArregloDatos ar = new ArregloDatos(2);
        ar.agregar(an1);
        ar.agregar(an2);
        SalidaTerminal.consola("SumaArreglos: "+an3.sumarArreglosDatos(ar)+"\n");
        SalidaTerminal.consola("SumaEscalares: "+an3.sumarEscalares(an2)+"\n");
        ArregloNumeros an4 = new ArregloNumeros(3);
        an4.agregar(1);
        an4.agregar(3);
        an4.agregar(4);
        SalidaTerminal.consola("SumaIndices: "+an3.sumarIndices(an4)+"\n");
        ArregloNumeros an5 = new ArregloNumeros(3);
        an5.agregar(3.0);
        an5.agregar(6.0);
        an5.agregar(2.0);
        ArregloNumeros an6 = new ArregloNumeros(3);
        an6.agregar(7.0);
        an6.agregar(3.0);
        an6.agregar(8.0);
        ArregloDatos arr = new ArregloDatos(3);
        arr.agregar(an5);
        arr.agregar(an6);
        SalidaTerminal.consola("Linealmente dependientes: "+an2.sonLinealmenteDep(arr)+"\n");
        ArregloNumeros an7 = new ArregloNumeros(3);
        an7.agregar(0);
        an7.agregar(0);
        an7.agregar(0);
        SalidaTerminal.consola("Linealmente independientes: "+an7.sonLinealmenteIdep(arr)+"\n");
        ArregloNumeros or1 = new ArregloNumeros(2);
        or1.agregar(1.0);
        or1.agregar(2.0);
        ArregloNumeros or2 = new ArregloNumeros(2);
        or2.agregar(-2.0);
        or2.agregar(1.0);
        SalidaTerminal.consola("Ortogonales: "+or1.esOrtogonal(or2)+"\n");
        ArregloNumeros or3 = new ArregloNumeros(2);
        or3.agregar(-2.0);
        or3.agregar(4.0);
        ArregloNumeros or4 = new ArregloNumeros(2);
        or4.agregar(1.0);
        or4.agregar(-2.0);
        SalidaTerminal.consola("Paralelos: "+or3.esParalelo(or4)+"\n");

        ArregloDatos arreglo = new ArregloDatos(5);
        arreglo.agregar("H");
        arreglo.agregar("D");
        arreglo.agregar("Z");
        arreglo.agregar("M");
        arreglo.agregar("G");
        SalidaTerminal.consola("ArregloDatos: \n");
        arreglo.imprimir();
        SalidaTerminal.consola("subLista: \n");
        arreglo.subLista(an4).imprimir();
    }
}
