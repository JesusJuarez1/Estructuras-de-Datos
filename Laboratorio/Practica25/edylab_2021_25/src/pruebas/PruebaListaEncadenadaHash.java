package pruebas;

import entradasalida.SalidaTerminal;
import estructuraslineales.ArregloDatos;
import estructuraslineales.ListaEncadenada;
import estructuraslineales.ListaEncadenadaHash;
import estructurasnolineales.Tabla2D;

public class PruebaListaEncadenadaHash {
    public static void main(String[] args) {
        SalidaTerminal.consola("Lista 1:\n");
        ListaEncadenadaHash l1 = new ListaEncadenadaHash();
        l1.insertar(1,"A");
        l1.insertar(2,"B");
        l1.insertar(3,"C");
        l1.insertar(4,"D");
        l1.insertar(5,"E");
        l1.insertar(5,"F");
        l1.insertar(6,"J");
        l1.insertar(7,"D");
        l1.imprimir();
        SalidaTerminal.consola("\nEliminar por clave: "+l1.eliminar(1)+"\n");
        l1.imprimir();
        SalidaTerminal.consola("\nEliminar por valor: "+l1.eliminarValor("D")+"\n");
        l1.imprimir();
        SalidaTerminal.consola("\nBuscar por clave: "+l1.buscar(5)+"\n");
        SalidaTerminal.consola("Buscar por valor: "+l1.buscarValor("B")+"\n");
        SalidaTerminal.consola("Substituir por clave: "+l1.substituir(3,"Z")+"\n");
        l1.imprimir();
        SalidaTerminal.consola("\nSubstituir por valor: : "+l1.substituirValor("J","H")+"\n");
        l1.imprimir();
        SalidaTerminal.consola("\nImprimir claves:\n");
        l1.imprimirClaves();
        SalidaTerminal.consola("\nImprimir valores:\n");
        l1.imprimirValores();
        SalidaTerminal.consola("\nA arreglos:\nClaves:\n");
        ListaEncadenada lArr =  l1.aArreglos();
        ((ArregloDatos)lArr.obtener(0)).imprimir();
        SalidaTerminal.consola("\nValores:\n");
        ((ArregloDatos)lArr.obtener(1)).imprimir();
        SalidaTerminal.consola("\nA listas ligadas:\nClaves:\n");
        ListaEncadenada lLig = l1.aListas();
        ((ListaEncadenada)lLig.obtener(0)).imprimir();
        SalidaTerminal.consola("\nValores:\n");
        ((ListaEncadenada)lLig.obtener(1)).imprimir();
        SalidaTerminal.consola("\nA matriz2D: \n");
        Tabla2D m2d = l1.aTabla();
        m2d.imprimirR();
        ListaEncadenadaHash l2 = new ListaEncadenadaHash();
        l2.insertar(1,"A");
        l2.insertar(2,"B");
        l2.insertar(3,"C");
        l2.insertar(4,"D");
        l2.insertar(5,"E");
        l2.insertar(5,"F");
        l2.insertar(6,"J");
        l2.insertar(7,"D");
        SalidaTerminal.consola("\nVaciar l2:\n");
        l2.imprimir();
        l2.vaciar();
        SalidaTerminal.consola("\n");
        l2.imprimir();
        SalidaTerminal.consola("\nObtener por clave: "+l1.obtener(4)+"\n");
        ListaEncadenadaHash l3 = new ListaEncadenadaHash();
        l3.insertar(0,"P");
        l3.insertar(8,"S");
        l3.insertar(4,"Ñ");
        l3.insertar(10,"M");
        SalidaTerminal.consola("\nAgregar todo lista: \n");
        l1.agregarLista(l3);
        l1.imprimir();
        SalidaTerminal.consola("\nLongitud de la lista: "+l1.cantidadElementos()+"\n");
        SalidaTerminal.consola("\nl2:\n");
        l2.insertar(1,"Z");
        l2.insertar(2,"X");
        l2.insertar(3,"G");
        l2.imprimir();
        SalidaTerminal.consola("\nAgregar arreglos a l2:\n");
        l2.agregarArreglos(((ArregloDatos)lArr.obtener(0)),((ArregloDatos)lArr.obtener(1)));
        l2.imprimir();

        l2.vaciar();
        SalidaTerminal.consola("\nl2:\n");
        l2.insertar(1,"A");
        l2.insertar(2,"F");
        l2.insertar(3,"Ñ");
        l2.imprimir();
        SalidaTerminal.consola("\nAgregar listas a l2:\n");
        l2.agregarListas(((ListaEncadenada) lLig.obtener(0)),((ListaEncadenada) lLig.obtener(1)));
        l2.imprimir();

        SalidaTerminal.consola("\nl2:\n");
        l2.insertar(1,"N");
        l2.insertar(2,"V");
        l2.insertar(3,"T");
        l2.imprimir();
        SalidaTerminal.consola("\nAgregar Matriz a l2:\n");
        l2.agregarTabla(m2d);
        l2.imprimir();
    }
}
